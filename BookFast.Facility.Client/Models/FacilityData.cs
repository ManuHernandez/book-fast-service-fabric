// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BookFast.Facility.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class FacilityData
    {
        /// <summary>
        /// Initializes a new instance of the FacilityData class.
        /// </summary>
        public FacilityData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FacilityData class.
        /// </summary>
        /// <param name="name">Facility name</param>
        /// <param name="streetAddress">Facility street address</param>
        /// <param name="description">Facility description</param>
        /// <param name="longitude">Latitude</param>
        /// <param name="latitude">Longitude</param>
        /// <param name="images">Facility images</param>
        public FacilityData(string name, string streetAddress, string description = default(string), double? longitude = default(double?), double? latitude = default(double?), IList<string> images = default(IList<string>))
        {
            Name = name;
            Description = description;
            StreetAddress = streetAddress;
            Longitude = longitude;
            Latitude = latitude;
            Images = images;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets facility name
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets facility description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets facility street address
        /// </summary>
        [JsonProperty(PropertyName = "streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or sets latitude
        /// </summary>
        [JsonProperty(PropertyName = "longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or sets longitude
        /// </summary>
        [JsonProperty(PropertyName = "latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or sets facility images
        /// </summary>
        [JsonProperty(PropertyName = "images")]
        public IList<string> Images { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (StreetAddress == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StreetAddress");
            }
            if (Name != null)
            {
                if (Name.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 100);
                }
                if (Name.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 3);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 1000)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 1000);
                }
                if (Description.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Description", 0);
                }
            }
            if (StreetAddress != null)
            {
                if (StreetAddress.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "StreetAddress", 100);
                }
                if (StreetAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "StreetAddress", 0);
                }
            }
        }
    }
}
